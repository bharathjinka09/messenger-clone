{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","size","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8UA0BeA,G,MAtBCC,sBAAW,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,QACtBC,EADkD,EAAnBC,WACTF,EAAQE,SACpC,OACC,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC9C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAqB,sBAC9C,kBAACI,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACEC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAEVR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MALD,IAKwDF,EAAQA,WAInE,6BACA,6BACA,kC,iBCHaU,EALKC,IAASC,cAXN,CACrBC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMMC,Y,iCCmERC,MAzEf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,IAH5B,mBAGNG,EAHM,KAGIC,EAHJ,OAImBJ,mBAAS,IAJ5B,mBAINrB,EAJM,KAII0B,EAJJ,KAsCb,OA7BAC,qBAAU,WAERnB,EAAGoB,WAAW,YACbC,QAAQ,YAAY,QACpBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIrC,QAASoC,EAAIE,iBAElE,IAEFT,qBAAU,WAERD,EAAYW,OAAO,6BAGnB,IAgBA,yBAAKpC,UAAU,OACb,6BACA,yBAAKqC,IAAI,6FAA6FC,IAAI,cAC1G,kDACA,6BACA,4BAAI,sCAAYvC,IAEhB,0BAAMC,UAAU,aAChB,kBAACuC,EAAA,EAAD,CAAavC,UAAU,oBACrB,kBAACwC,EAAA,EAAD,CAAOxC,UAAU,aAAayC,YAAY,qBAAqBC,MAAOrB,EAAOsB,SAAU,SAAAC,GAAK,OAAItB,EAASsB,EAAMC,OAAOH,UACtH,6BAEA,kBAACI,EAAA,EAAD,CAAY9C,UAAU,kBAAkB+C,UAAW1B,EAAO2B,KAAK,QAAQC,KAAK,SAAS5C,QAAQ,YAAYD,MAAM,UAAU8C,QA1B3G,SAACN,GAEjBA,EAAMO,iBAEN5C,EAAGoB,WAAW,YAAYyB,IAAI,CAC5BvD,QAASwB,EACTtB,SAAUA,EACVsD,UAAW7C,IAASU,UAAUoC,WAAWC,oBAE3CjC,EAAS,MAmBL,kBAAC,IAAD,SAQJ,kBAAC,IAAD,KAEIC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIrC,EAAN,EAAMA,QAAN,OACT,kBAAC,EAAD,CAAS2D,IAAKtB,EAAInC,SAAUA,EAAUF,QAASA,UC9DzC4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7E,c","file":"static/js/main.6be1aa00.chunk.js","sourcesContent":["import React, { forwardRef } from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\nimport './Message.css'\n\nconst Message = forwardRef(({message, username}, ref) => {\n\tconst isUser = username === message.username;\n\treturn (\t\n\t\t<div ref={ref} className={`message ${isUser && 'message__user'}`}>\n\t\t\t<Card className={isUser ? 'message__userCard': 'message__guestCard'}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t<Typography\n\t\t\t\t\t  color=\"white\"\n\t\t\t\t\t  variant=\"h5\"\n\t\t\t\t\t  component=\"h2\"\n\t\t\t\t\t>\n\t\t\t\t\t{!isUser && `${message.username || 'Unknown User'}: `} {message.message}\n\t\t\t\t\t</Typography>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t<br />\n\t\t<br />\n\t\t<br />\n\t\t</div>\n\t)\n})\n\nexport default Message","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAO39t-rUj2kF6rPWKC4uwLDUxITxRXrwc\",\n  authDomain: \"fb-messenger-clone-68787.firebaseapp.com\",\n  databaseURL: \"https://fb-messenger-clone-68787.firebaseio.com\",\n  projectId: \"fb-messenger-clone-68787\",\n  storageBucket: \"fb-messenger-clone-68787.appspot.com\",\n  messagingSenderId: \"458310203504\",\n  appId: \"1:458310203504:web:fc86681d5c80092775dcb5\",\n  measurementId: \"G-MZQ30710PG\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\n\nconst db = firebaseApp.firestore();\n\nexport default db;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { FormControl, Input } from '@material-ui/core'\nimport Message from './Message'\nimport db from './firebase'\nimport firebase from 'firebase'\nimport FlipMove from 'react-flip-move'\nimport SendIcon from '@material-ui/icons/Send'\nimport { IconButton } from '@material-ui/core'\n\nfunction App() {\n\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n\n  // useState = variable in REACT\n  // useEffect = run code on a specific condition (when data changes in db)\n  \n  useEffect(() =>{\n    // run once when the app component loads\n    db.collection('messages')\n    .orderBy('timestamp','desc')\n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    })\n  },[])\n\n  useEffect(() =>{\n    // run code\n    setUsername(prompt('Please enter your name'));\n    // If its blank inside [], this code runs ONCE when the app component loads\n    // If we have a varaible like input inside [], it runs when input changes everytime \n  },[]) // condition dependencies\n\n  const sendMessage = (event) => {\n      // logic to send message\n      event.preventDefault();\n\n      db.collection('messages').add({\n        message: input,\n        username: username,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })\n      setInput('');\n  }\n\n\n  return (\n    <div className=\"App\">\n      <br/>\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" alt=\"Messenger\" />\n      <h1>FB Messenger Clone</h1>\n      <br />\n      <h2><i>Welcome {username}</i></h2>\n\n      <form className=\"app__form\">\n      <FormControl className='app__formControl'>\n        <Input className='app__input' placeholder=\"Enter a message...\" value={input} onChange={event => setInput(event.target.value)} />\n        <br/>\n\n        <IconButton className=\"app__iconButton\" disabled={!input} size=\"small\" type=\"submit\" variant=\"contained\" color=\"primary\" onClick={sendMessage}>\n          \n          <SendIcon />\n\n        </IconButton>\n\n      </FormControl>\n\n      </form>\n\n      <FlipMove>\n        {\n          messages.map(({id, message}) => (\n              <Message key={id} username={username} message={message} />\n            ))\n        }\n      </FlipMove>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}